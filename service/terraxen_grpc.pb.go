// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: terraxen.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TerraxenSchedulerClient is the client API for TerraxenScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerraxenSchedulerClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterReply, error)
	Checkin(ctx context.Context, in *CheckinRequest, opts ...grpc.CallOption) (*CheckinReply, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobReply, error)
	UpdateJob(ctx context.Context, in *UpdateJobStateRequest, opts ...grpc.CallOption) (*UpdateJobStateReply, error)
	SendJobLog(ctx context.Context, opts ...grpc.CallOption) (TerraxenScheduler_SendJobLogClient, error)
}

type terraxenSchedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewTerraxenSchedulerClient(cc grpc.ClientConnInterface) TerraxenSchedulerClient {
	return &terraxenSchedulerClient{cc}
}

func (c *terraxenSchedulerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/TerraxenScheduler/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraxenSchedulerClient) Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterReply, error) {
	out := new(UnregisterReply)
	err := c.cc.Invoke(ctx, "/TerraxenScheduler/Unregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraxenSchedulerClient) Checkin(ctx context.Context, in *CheckinRequest, opts ...grpc.CallOption) (*CheckinReply, error) {
	out := new(CheckinReply)
	err := c.cc.Invoke(ctx, "/TerraxenScheduler/Checkin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraxenSchedulerClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobReply, error) {
	out := new(GetJobReply)
	err := c.cc.Invoke(ctx, "/TerraxenScheduler/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraxenSchedulerClient) UpdateJob(ctx context.Context, in *UpdateJobStateRequest, opts ...grpc.CallOption) (*UpdateJobStateReply, error) {
	out := new(UpdateJobStateReply)
	err := c.cc.Invoke(ctx, "/TerraxenScheduler/UpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraxenSchedulerClient) SendJobLog(ctx context.Context, opts ...grpc.CallOption) (TerraxenScheduler_SendJobLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &TerraxenScheduler_ServiceDesc.Streams[0], "/TerraxenScheduler/SendJobLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &terraxenSchedulerSendJobLogClient{stream}
	return x, nil
}

type TerraxenScheduler_SendJobLogClient interface {
	Send(*JobLogEntry) error
	CloseAndRecv() (*JobLogEntryReply, error)
	grpc.ClientStream
}

type terraxenSchedulerSendJobLogClient struct {
	grpc.ClientStream
}

func (x *terraxenSchedulerSendJobLogClient) Send(m *JobLogEntry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *terraxenSchedulerSendJobLogClient) CloseAndRecv() (*JobLogEntryReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(JobLogEntryReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TerraxenSchedulerServer is the server API for TerraxenScheduler service.
// All implementations must embed UnimplementedTerraxenSchedulerServer
// for forward compatibility
type TerraxenSchedulerServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Unregister(context.Context, *UnregisterRequest) (*UnregisterReply, error)
	Checkin(context.Context, *CheckinRequest) (*CheckinReply, error)
	GetJob(context.Context, *GetJobRequest) (*GetJobReply, error)
	UpdateJob(context.Context, *UpdateJobStateRequest) (*UpdateJobStateReply, error)
	SendJobLog(TerraxenScheduler_SendJobLogServer) error
	mustEmbedUnimplementedTerraxenSchedulerServer()
}

// UnimplementedTerraxenSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedTerraxenSchedulerServer struct {
}

func (UnimplementedTerraxenSchedulerServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTerraxenSchedulerServer) Unregister(context.Context, *UnregisterRequest) (*UnregisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedTerraxenSchedulerServer) Checkin(context.Context, *CheckinRequest) (*CheckinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkin not implemented")
}
func (UnimplementedTerraxenSchedulerServer) GetJob(context.Context, *GetJobRequest) (*GetJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedTerraxenSchedulerServer) UpdateJob(context.Context, *UpdateJobStateRequest) (*UpdateJobStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedTerraxenSchedulerServer) SendJobLog(TerraxenScheduler_SendJobLogServer) error {
	return status.Errorf(codes.Unimplemented, "method SendJobLog not implemented")
}
func (UnimplementedTerraxenSchedulerServer) mustEmbedUnimplementedTerraxenSchedulerServer() {}

// UnsafeTerraxenSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerraxenSchedulerServer will
// result in compilation errors.
type UnsafeTerraxenSchedulerServer interface {
	mustEmbedUnimplementedTerraxenSchedulerServer()
}

func RegisterTerraxenSchedulerServer(s grpc.ServiceRegistrar, srv TerraxenSchedulerServer) {
	s.RegisterService(&TerraxenScheduler_ServiceDesc, srv)
}

func _TerraxenScheduler_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraxenSchedulerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TerraxenScheduler/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraxenSchedulerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraxenScheduler_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraxenSchedulerServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TerraxenScheduler/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraxenSchedulerServer).Unregister(ctx, req.(*UnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraxenScheduler_Checkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraxenSchedulerServer).Checkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TerraxenScheduler/Checkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraxenSchedulerServer).Checkin(ctx, req.(*CheckinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraxenScheduler_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraxenSchedulerServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TerraxenScheduler/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraxenSchedulerServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraxenScheduler_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraxenSchedulerServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TerraxenScheduler/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraxenSchedulerServer).UpdateJob(ctx, req.(*UpdateJobStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraxenScheduler_SendJobLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TerraxenSchedulerServer).SendJobLog(&terraxenSchedulerSendJobLogServer{stream})
}

type TerraxenScheduler_SendJobLogServer interface {
	SendAndClose(*JobLogEntryReply) error
	Recv() (*JobLogEntry, error)
	grpc.ServerStream
}

type terraxenSchedulerSendJobLogServer struct {
	grpc.ServerStream
}

func (x *terraxenSchedulerSendJobLogServer) SendAndClose(m *JobLogEntryReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *terraxenSchedulerSendJobLogServer) Recv() (*JobLogEntry, error) {
	m := new(JobLogEntry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TerraxenScheduler_ServiceDesc is the grpc.ServiceDesc for TerraxenScheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TerraxenScheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TerraxenScheduler",
	HandlerType: (*TerraxenSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _TerraxenScheduler_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _TerraxenScheduler_Unregister_Handler,
		},
		{
			MethodName: "Checkin",
			Handler:    _TerraxenScheduler_Checkin_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _TerraxenScheduler_GetJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _TerraxenScheduler_UpdateJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendJobLog",
			Handler:       _TerraxenScheduler_SendJobLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "terraxen.proto",
}
